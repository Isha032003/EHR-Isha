# -*- coding: utf-8 -*-
"""ISHA EHR .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UxbTjgMD6BFh1P3z51qjLyh2l9dE4w9N
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/ehr_mixed_data.csv')

df.head()

df.info()

df.describe()

df.isnull().sum()

df['Diagnosis'] = df['Diagnosis'].replace('None', np.nan)

print(df)

plt.figure(figsize=(6,4))
sns.histplot(df['Age'], bins=5, kde=True, color='skyblue')
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()

corr_matrix = numeric_df.corr()
plt.figure(figsize=(6,5))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Final Correlation Heatmap')
plt.show()

print("\nðŸ”¢ Correlation Table:")
print(numeric_df.corr())

df.to_csv("ehr_cleaned_with_bp.csv", index=False)
print("\nðŸ’¾ Cleaned dataset saved as 'ehr_cleaned_with_bp.csv'")

plt.figure(figsize=(5,4))
sns.countplot(data=df, x='Gender', palette='pastel')
plt.title("Gender Distribution of Patients")
plt.xlabel("Gender")
plt.ylabel("Count")
plt.show()

print(df.columns)

plt.figure(figsize=(6,4))
sns.boxplot(x='Diagnosis', y='Age', data=df)
plt.title('Diagnosis vs Age')
plt.show()

df['Imaging_Type'].value_counts()

plt.figure(figsize=(8,5))
sns.countplot(x='Gender', hue='Diagnosis', data=df)
plt.title('Gender vs Diagnosis')
plt.show()

df['Diagnosis'].value_counts().plot.pie(autopct='%1.1f%%', figsize=(6,6))
plt.title('Diagnosis Distribution')
plt.show()

sns.pairplot(numeric_df)
plt.show()

plt.figure(figsize=(8,5))
sns.countplot(y='Imaging_Type', data=df)
plt.title('Imaging Type Count')
plt.show()

df['AI_Note_Length'] = df['AI_Generated_Note'].astype(str).apply(len)
plt.figure(figsize=(8,5))
sns.scatterplot(x='Age', y='AI_Note_Length', hue='Diagnosis', data=df)
plt.title('Age vs AI Note Length')
plt.show()

df['Clinical_Notes_Length'] = df['Clinical_Notes'].astype(str).apply(lambda x: len(x.split()))
plt.figure(figsize=(8,5))
sns.histplot(df['Clinical_Notes_Length'], bins=20, kde=True)
plt.title('Distribution of Clinical Notes Length')
plt.show()

top_icd = df['ICD10_Code'].value_counts().head(10)
plt.figure(figsize=(8,5))
sns.barplot(x=top_icd.values, y=top_icd.index)
plt.title('Top 10 ICD10 Codes')
plt.show()

df['Report_Date'] = pd.to_datetime(df['Report_Date'], errors='coerce')
df['Report_Month'] = df['Report_Date'].dt.month
plt.figure(figsize=(8,5))
sns.countplot(x='Report_Month', data=df)
plt.title('Reports per Month')
plt.show()

import numpy as np
numeric_df = df[['Age', 'AI_Note_Length', 'Clinical_Notes_Length']].copy()

numeric_df.mean()
numeric_df.median()
numeric_df.std()
numeric_df.min()
numeric_df.max()

corr_matrix = numeric_df.corr()
print(corr_matrix)

# Heatmap visualization
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(6,5))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

#covariance matrix

cov_matrix = numeric_df.cov()
print(cov_matrix)

arr = numeric_df.to_numpy()
arr_T = arr.T

dot_product = np.dot(arr_T, arr)
print(dot_product)

arr_squared = arr ** 2
arr_sum = np.sum(arr, axis=0)  # sum per column
arr_mean = np.mean(arr, axis=0)

# Standardization (Z-score)
arr_standardized = (arr - np.mean(arr, axis=0)) / np.std(arr, axis=0)

# Min-Max Normalization
arr_normalized = (arr - np.min(arr, axis=0)) / (np.max(arr, axis=0) - np.min(arr, axis=0))

# Inverse (if square matrix)
if arr.shape[0] == arr.shape[1]:
    arr_inv = np.linalg.inv(arr)

# Determinant (if square matrix)
if arr.shape[0] == arr.shape[1]:
    arr_det = np.linalg.det(arr)

# Eigenvalues and Eigenvectors
eigenvalues, eigenvectors = np.linalg.eig(np.dot(arr_T, arr))
print("Eigenvalues:", eigenvalues)

# Sum of each column
numeric_df.sum()

# Cumulative sum
numeric_df.cumsum()

# Product of each column
numeric_df.prod()

fig, axs = plt.subplots(2, 2, figsize=(12,10))

# Histogram of Age
sns.histplot(df['Age'], bins=20, kde=True, ax=axs[0,0]).set(title='Age Distribution')

# Boxplot: Age vs Diagnosis
sns.boxplot(x='Diagnosis', y='Age', data=df, ax=axs[0,1]).set(title='Age vs Diagnosis')

# Countplot: Gender vs Diagnosis
sns.countplot(x='Gender', hue='Diagnosis', data=df, ax=axs[1,0]).set(title='Gender vs Diagnosis')

# Correlation heatmap
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm', ax=axs[1,1]).set(title='Correlation Heatmap')

plt.tight_layout()
plt.show()

